openapi: 3.0.3
info:
  title: Game Library Service
  description: Game Library Service Backend API Specification
  contact:
    name: API Support
    email: raeperd117@gmail.com
  version: 0.0.1
servers:
  - url: 'http://load-balancer-gameflix-backend-754529149.ap-northeast-2.elb.amazonaws.com'
    description: AWS Load balancer for backend fargate service
  - url: 'http://localhost:8080'
    description: localhost server
security:
  - BearerToken: [ ]
  - OpenID:
      - openid
      - email
      - profile
tags:
  - name: user
    description: User resource
  - name: game
    description: Game resource
paths:
  '/users/{user-id}':
    parameters:
      - $ref: "#/components/parameters/user-id"
    get:
      operationId: Get user by id
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      operationId: Delete user by id
      tags:
        - user
      responses:
        '204':
          description: NO CONTENT
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users/{user-id}/games:
    parameters:
      - $ref: "#/components/parameters/user-id"
    get:
      operationId: Get games of user
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    required: true
                    type: array
                    description: list of games summary model
                    items:
                      $ref: '#/components/schemas/GameSummaryModel'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      operationId: Add game to user
      tags:
        - user
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              required: true
              writeOnly: true
              properties:
                slug:
                  $ref: "#/components/schemas/game-slug"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameModel"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users/{user-id}/games/{slug}:
    parameters:
      - $ref: "#/components/parameters/user-id"
      - $ref: "#/components/parameters/slug"
    get:
      operationId: Get game of user
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameModel'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      operationId: Delete game of user
      tags:
        - user
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /games:
    get:
      operationId: Get games
      tags:
        - game
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    required: true
                    type: array
                    description: list of games
                    items:
                      $ref: '#/components/schemas/GameSummaryModel'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /games/{slug}:
    parameters:
      - $ref: "#/components/parameters/slug"
    get:
      operationId: Get single game model
      tags:
        - game
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameModel"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BearerToken:
      type: "http"
      description: ID token from google openId Connect
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: "openIdConnect"
      openIdConnectUrl: "https://accounts.google.com/.well-known/openid-configuration"
  parameters:
    user-id:
      name: user-id
      required: true
      in: path
      description: ID of user field sub of [google ID token payload](https://developers.google.com/identity/protocols/oauth2/openid-connect#an-id-tokens-payload)
      schema:
        type: number
        format: int64
        writeOnly: true
    slug:
      name: slug
      required: true
      in: path
      description: slug of game
      schema:
        "$ref": "#/components/schemas/game-slug"
    page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 0
        format: int32
        description: Page number of pagination request
    size:
      name: size
      in: query
      schema:
        type: integer
        minimum: 1
        format: int32
        description: Size of one page of pagination request
    search:
      name: search
      in: query
      schema:
        type: string
        description: Name of game to search
  schemas:
    UserModel:
      type: object
      readOnly: true
      properties:
        email:
          required: true
          type: string
          format: email
          description: Email address
          example: raeperd117@gmail.com
        games:
          required: true
          type: array
          description: Games of user
          items:
            $ref: "#/components/schemas/GameModel"
    GameSummaryModel:
      type: object
      readOnly: true
      description: GameSummary model
      properties:
        slug:
          $ref: "#/components/schemas/game-slug"
        name:
          required: true
          type: string
          description: Name of this game
          example: League of Legend
        cover:
          $ref : "#/components/schemas/cover"
    GameModel:
      type: object
      readOnly: true
      description: Game model following [Game â€“ IGDB API docs](https://api-docs.igdb.com/#game)
      properties:
        slug:
          $ref: "#/components/schemas/game-slug"
        name:
          required: true
          type: string
          description: Name of this game
          example: League of Legend
        release_at:
          required: true
          type: number
          format: unix time stamp
          description: Release date of game. Epoch timestamp
          example: 1256605200
        updated_at:
          required: true
          type: number
          format: unix time stamp
          description: The last date this entry was updated
          example: 1626713554
        cover:
          $ref : "#/components/schemas/cover"
        url:
          required: true
          type: string
          format: url
          description: The website address (URL) of the item
        genres:
          required: true
          type: array
          items:
            type: string
            description: genre of game as slug
            example: moba
        rating_external:
          required: true
          type: number
          description: Rating based on igdb scores
          example: 80.35918701514501
        rating_external_count:
          required: true
          type: integer
          description: Number of igdb ratings
          example: 501
        platforms:
          required: true
          type: array
          items:
            type: string
            description: platform of game
            example: win
          example: ["win", "mac"]
    ErrorModel:
      type: object
      readOnly: true
      properties:
        message:
          required: true
          type: string
          description: Error message
          example: Request Failed with Error
    game-slug:
      required: true
      type: string
      description: A url-safe, unique, lower-case version of the name
      example: league-of-legends
    cover:
      required: true
      type: string
      format: url
      description: Image URL for game
      example: https://images.igdb.com/igdb/image/upload/t_cover_big/co254s.jpg
  responses:
    '400':
      description: Bad Request
    '401':
      description: Unauthorized
    '403':
      description: Forbidden
    '404':
      description: Not Found
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
